/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package se.gui;

/**
 *
 * @author braya
 */

import se.model.TablaID3;
import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.text.DecimalFormat;
import java.util.List;
import se.util.ID3Calculator;

public class PanelCalculos extends javax.swing.JPanel {

    /**
     * Creates new form PanelCalculos
     */
    private JTextArea areaCalculos;
    private DecimalFormat df;
    private TablaID3 datosActuales;
    
    public PanelCalculos() {
        setLayout(new BorderLayout(5, 5));
        
        // Inicializar componentes
        areaCalculos = new JTextArea();
        areaCalculos.setEditable(false);
        areaCalculos.setFont(new Font("Monospaced", Font.PLAIN, 12));
        
        JScrollPane scrollPane = new JScrollPane(areaCalculos);
        add(new JLabel("Cálculos de Entropía y Ganancia:"), BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        
        df = new DecimalFormat("#.####");
        
        // Panel de botones
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton btnExportar = new JButton("Exportar Cálculos");
        btnExportar.addActionListener(e -> exportarCalculos());
        panelBotones.add(btnExportar);
        
        add(panelBotones, BorderLayout.SOUTH);
    }
    
    public void actualizarCalculos(TablaID3 datos, List<Integer> atributosDisponibles) {
        this.datosActuales = datos;
        if (datos == null || atributosDisponibles == null) {
            areaCalculos.setText("No hay datos para mostrar cálculos.");
            return;
        }
        
        StringBuilder sb = new StringBuilder();
        sb.append("CÁLCULOS DEL ALGORITMO ID3\n");
        sb.append("==========================\n\n");
        
        // Calcular entropía del conjunto completo
        List<String> columnaMeta = ID3Calculator.obtenerColumna(datos, datos.getColumnaObjetivo());
        double entropiaTotal = ID3Calculator.calcularEntropiaConjunto(columnaMeta);
        
        sb.append("1. Entropía del conjunto completo\n");
        sb.append("--------------------------------\n");
        sb.append("E(S) = ").append(df.format(entropiaTotal)).append("\n\n");
        
        // Calcular ganancia para cada atributo
        sb.append("2. Ganancia de información por atributo\n");
        sb.append("-------------------------------------\n");
        
        for (int atributo : atributosDisponibles) {
            String nombreAtributo = datos.getColumnas().get(atributo);
            double ganancia = ID3Calculator.calcularGanancia(datos, atributo);
            
            sb.append("Atributo: ").append(nombreAtributo).append("\n");
            sb.append("Ganancia = ").append(df.format(ganancia)).append("\n\n");
        }
        
        areaCalculos.setText(sb.toString());
        areaCalculos.setCaretPosition(0);
    }
    
    private void exportarCalculos() {
        if (datosActuales == null) {
            JOptionPane.showMessageDialog(this,
                "No hay cálculos para exportar.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setSelectedFile(new File("calculos_id3.txt"));
        
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                File file = fileChooser.getSelectedFile();
                if (!file.getName().toLowerCase().endsWith(".txt")) {
                    file = new File(file.getParentFile(), file.getName() + ".txt");
                }
                
                try (PrintWriter writer = new PrintWriter(file)) {
                    writer.println(areaCalculos.getText());
                }
                
                JOptionPane.showMessageDialog(this,
                    "Cálculos exportados exitosamente.",
                    "Éxito",
                    JOptionPane.INFORMATION_MESSAGE);
                    
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this,
                    "Error al exportar los cálculos: " + ex.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
