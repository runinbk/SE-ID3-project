/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package se.gui;

/**
 *
 * @author braya
 */

import se.model.TablaID3;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import javax.swing.table.DefaultTableCellRenderer;

public class PanelTabla extends javax.swing.JPanel {

    /**
     * Creates new form PanelTabla
     */
    
    private JTable tabla;
    private DefaultTableModel modeloTabla;
    private TablaID3 datosID3;
    private int columnaObjetivo;
     
    public PanelTabla() {
        setLayout(new BorderLayout());
        initComponents();
        inicializarComponentes();
    }
    
    private void inicializarComponentes() {
        modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        
        tabla = new JTable(modeloTabla);
        tabla.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        
        JScrollPane scrollPane = new JScrollPane(tabla);
        scrollPane.setVerticalScrollBarPolicy(
            JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(
            JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
            
        add(scrollPane, BorderLayout.CENTER);
    }
    
    public void cargarDatos(TablaID3 datos) {
        this.datosID3 = datos;
        actualizarTabla();
    }
    
    private void actualizarTabla() {
        modeloTabla.setRowCount(0);
        modeloTabla.setColumnCount(0);
        
        // Agregar columnas
        datosID3.getColumnas().forEach(modeloTabla::addColumn);
        
        // Agregar filas
        datosID3.getDatos().forEach(fila -> 
            modeloTabla.addRow(fila.toArray())
        );
    }
    
    public void resaltarColumnaObjetivo(int columna) {
        this.columnaObjetivo = columna;

        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                                                           boolean isSelected, boolean hasFocus,
                                                           int row, int column) {
                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                if (column == columnaObjetivo) {
                    c.setBackground(new Color(230, 230, 255));
                } else {
                    c.setBackground(table.getBackground());
                }
                return c;
            }
        };

        if (columna >= 0 && columna < tabla.getColumnCount()) {
            tabla.getColumnModel().getColumn(columna).setCellRenderer(renderer);
            tabla.repaint();
        }
    }

    
    public TablaID3 getDatosID3() {
        return this.datosID3;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
